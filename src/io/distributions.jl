################################################################################
#  Copyright 2020, Tom Van Acker                                               #
################################################################################
# MultiStateSystems.jl                                                         #
# A Julia package to solve multi-state system models.                          #
# See http://github.com/timmyfaraday/MultiStateSystems.jl                      #
################################################################################

## eval
eval(œâ::Number,t::Number) = œâ
eval(œâ::Function,t::Number) = œâ(t) |> u"s/s"

## quantile
quantile_bisect(dst::AbstractDistribution, p::Real) =
    quantile_bisect(dst, p, minimum(dst), maximum(dst), 1.0e-12)
function quantile_bisect(dst::AbstractDistribution, p::Real, lx::Real, rx::Real,
                         tol::Real)
    cl, cr = cdf(dst, lx), cdf(dst, rx)
    @assert cl <= p <= cr
    while rx - lx > tol
        m = (lx + rx) / 2
        c = cdf(dst, m)
        if p > c
            cl, lx = c, m
        else
            cr, rx = c, m
    end end
    return (lx + rx) / 2
end

## exponential 
"""
    MultiStateSystems.Exponential

The [*exponential distribution*](http://en.wikipedia.org/wiki/Exponential_distribution)
with scale parameter `Œ∏` and an optional weight `œâ` has a probability density
function

```math
f(x; Œ∏, œâ) = \begin{cases}
                œâ/Œ∏ e^{-x/Œ∏}    & x ‚â• 0, \\
                0               & x < 0.
             \end{cases}
```
"""
# abstract type 
abstract type AbstractExponential{X,Y,Z} <: AbstractDistribution{X,Y,Z} end

# struct - Œ∏::Number, œâ::Real
struct ExponentialNR{X<:Number, Y<:Real, Z<:Function} <: AbstractExponential{X,Y,Z}
    Œ∏::X            # scale 
    œâ::Y            # weight: 0.0 < œâ <= 1.0
end
# constructors
Exponential() = ExponentialNR{Number,Real,Function}(1.0, 1.0)
Exponential(Œ∏::Number) = ExponentialNR{Number,Real,Function}(Œ∏, 1.0)
Exponential(Œ∏::Number, œâ::Real) = ExponentialNR{Number,Real,Function}(Œ∏, œâ)

# struct - Œ∏::Number, œâ::Function
struct ExponentialNF{X<:Number, Y<:Real, Z<:Function} <: AbstractExponential{X,Y,Z}
    Œ∏::X            # scale
    œâ::Z            # weight: 0.0 < œâ(t) <= 1.0
end
# constructors
Exponential(Œ∏::Number, œâ::Function) = ExponentialNF{Number,Real,Function}(Œ∏, œâ)

# shortened constructors
ùë¨() = Exponential()
ùë¨(Œ∏::Number) = Exponential(Œ∏)
ùë¨(Œ∏::Number, œâ::Real) = Exponential(Œ∏, œâ)
ùë¨(Œ∏::Number, œâ::Function) = Exponential(Œ∏, œâ)

# general functions
scale(dst::AbstractExponential)  = dst.Œ∏
weight(dst::AbstractExponential) = dst.œâ
params(dst::AbstractExponential) = (dst.Œ∏, dst.œâ)

rate(dst::AbstractExponential) = 1.0 / dst.Œ∏

minimum(dst::AbstractExponential) = zero(dst.Œ∏)
maximum(dst::AbstractExponential) = (Inf)unit(dst.Œ∏)

# quantile
xv(dst::AbstractExponential, z::Real) = z * dst.Œ∏
quantile(dst::AbstractExponential, p::Real)  = -xv(dst, log1p(-p))
cquantile(dst::AbstractExponential, p::Real) = -xv(dst, log(p))
sojourn(dst::AbstractExponential,dœÜ::Number,tol::Real) = 
    zero(dœÜ):dœÜ:cquantile(dst,tol)

# density functions
function pdf(dst::AbstractExponential, œÜ::Number, t::Number=zero(œÜ))
    Œ∏, œâ = params(dst)
    dimension(Œ∏)==dimension(œÜ)==dimension(t) || return false
    if œÜ >= zero(Œ∏)
        y = uconvert(unit(Œ∏),œÜ)
        eval(œâ,t) * (1/Œ∏) * exp(-y/Œ∏)
    else
        zero(1/Œ∏)
    end
end
function cdf(dst::AbstractExponential, œÜ::Number, t::Number=zero(œÜ))
    Œ∏, œâ = params(dst)
    dimension(Œ∏)==dimension(œÜ)==dimension(t) || return false
    if œÜ >= zero(Œ∏)
        y = uconvert(unit(Œ∏),œÜ)
        eval(œâ,t) * (1 - exp(-y/Œ∏))
    else
        zero(Number)
    end
end
function ccdf(dst::AbstractExponential, œÜ::Number, t::Number=zero(œÜ))
    Œ∏, œâ = params(dst)
    dimension(Œ∏)==dimension(œÜ)==dimension(t) || return false
    if œÜ >= zero(Œ∏)
        y = uconvert(unit(Œ∏),œÜ)
        eval(œâ,t) * exp(-y/Œ∏)
    else
        eval(œâ,t)
    end
end

## weibull
"""
    MultiStateSystems.Weibull

The [*Weibull distribution*](http://en.wikipedia.org/wiki/Weibull_distribution)
with scale parameter `Œ∏`, shape parameter `Œ±` and optional weight `œâ` has a
probability density function

```math
f(x, Œ∏, Œ±, œâ) = \\begin{cases}
                    \\frac{Œ±œâ}{Œ∏} \\cdot \\big(\\frac{x}{Œ∏}\\big)^{Œ±-1} \\cdot e^{-\\big(\\frac{x}{Œ∏}\\big)^{Œ±}}  &\\text{if:}~x ‚â• 0, \\\\
                    0                                                                                 &\\text{if:}~x < 0.
                \\end{cases}
```
# Constructors
| Full              | Abbr.         | Description                                               |
| :---------------- | :------------ | :-------------------------------------------------------- |
| `Weibull(Œ∏,Œ±,œâ)`  | `ùëæ(Œ∏,Œ±,œâ)`   | full constructor                                           |
| `Weibull(Œ∏,Œ±)`    | `ùëæ(Œ∏,Œ±)`     | constructor which defaults to `Weibull(Œ∏,Œ±,1.0)`           |
| `Weibull(Œ∏)`      | `ùëæ(Œ∏)`       | constructor which defaults to `Weibull(Œ∏,1.0,1.0)`         |
| `Weibull()`       | `ùëæ()`        | empty constructor which defaults to `Weibull(1.0,1.0,1.0)` |
# Examples
```julia-repl
julia> Weibull()            # default Weibull distr. with Œ∏ = 1.0, Œ± = 1.0 and œâ = 1.0
julia> ùëæ(3.0u"minute")     # Weibull distr. with Œ∏ = 3.0 min, Œ± = 1.0 and œâ = 1.0
julia> ùëæ(5.0u"yr",4.0)     # Weibull distr. with Œ∏ = 5.0 yr, Œ± = 4.0 and œâ = 1.0
julia> ùëæ(10.0,0.5,0.2)     # scaled Weibull distr. with Œ∏ = 10.0, Œ± = 0.5 and œâ = 0.2
```
"""
# abstract type
abstract type AbstractWeibull{X,Y,Z} <: AbstractDistribution{X,Y,Z} end

# struct - Œ∏::Number, Œ±::Real, œâ::Real
struct WeibullNRR{X<:Number, Y<:Real, Z<:Function} <: AbstractWeibull{X,Y,Z}
    Œ∏::X            # scale
    Œ±::Y            # shape
    œâ::Y            # weight: 0.0 < œâ <= 1.0
end
# constructors
Weibull() = WeibullNRR{Number,Real,Function}(1.0, 1.0, 1.0)
Weibull(Œ∏::Number) = WeibullNRR{Number,Real,Function}(Œ∏, 1.0, 1.0)
Weibull(Œ∏::Number, Œ±::Real) = WeibullNRR{Number,Real,Function}(Œ∏, Œ±, 1.0)
Weibull(Œ∏::Number, Œ±::Real, œâ::Real) = WeibullNRR{Number,Real,Function}(Œ∏, Œ±, œâ)

# struct - Œ∏::Number, Œ±::Real, œâ::Function
struct WeibullNRF{X<:Number, Y<:Real, Z<:Function} <: AbstractWeibull{X,Y,Z}
    Œ∏::X            # scale
    Œ±::Y            # shape
    œâ::Z            # weight: 0.0 < œâ(t) <= 1.0
end
# constructors
Weibull(Œ∏::Number, Œ±::Real, œâ::Function) = 
    WeibullNRF{Number,Real,Function}(Œ∏, Œ±, œâ)

# shortened constructors
ùëæ() = Weibull()
ùëæ(Œ∏::Number) = Weibull(Œ∏)
ùëæ(Œ∏::Number, Œ±::Real) = Weibull(Œ∏, Œ±)
ùëæ(Œ∏::Number, Œ±::Real, œâ::Real) = Weibull(Œ∏, Œ±, œâ)
ùëæ(Œ∏::Number, Œ±::Real, œâ::Function) = Weibull(Œ∏, Œ±, œâ)

# general functions
scale(dst::AbstractWeibull)  = dst.Œ∏
shape(dst::AbstractWeibull)  = dst.Œ±
weight(dst::AbstractWeibull) = dst.œâ
params(dst::AbstractWeibull) = (dst.Œ∏, dst.Œ±, dst.œâ)

minimum(dst::AbstractWeibull) = zero(dst.Œ∏)
maximum(dst::AbstractWeibull) = (Inf)unit(dst.Œ∏)

# quantile functions
xv(dst::AbstractWeibull, z::Real) = dst.Œ∏ * z ^ (1 / dst.Œ±)
quantile(dst::AbstractWeibull, p::Real)  = xv(dst, -log1p(-p))
cquantile(dst::AbstractWeibull, p::Real) = xv(dst, -log(p))
sojourn(dst::AbstractWeibull,dœÜ::Number,tol::Real) = 
    zero(dœÜ):dœÜ:cquantile(dst,tol) 

# density functions
function pdf(dst::AbstractWeibull, œÜ::Number, t::Number=zero(œÜ))
    Œ∏, Œ±, œâ = params(dst)
    dimension(Œ∏)==dimension(œÜ)==dimension(t) || return false
    if œÜ >= zero(Œ∏)
        y = (uconvert(unit(Œ∏),œÜ) + eps(Œ∏)) / Œ∏
        eval(œâ,t) * (Œ± / Œ∏) * y^(Œ± - 1) * exp(-y^Œ±)
    else
        zero(1/Œ∏)
    end
end
function cdf(dst::AbstractWeibull, œÜ::Number, t::Number=zero(œÜ))
    Œ∏, Œ±, œâ = params(dst)
    dimension(Œ∏)==dimension(œÜ)==dimension(t) || return false
    if œÜ >= zero(Œ∏)
        y = uconvert(unit(Œ∏),œÜ) / Œ∏
        ustrip(eval(œâ,t) * (1 - exp(-y^Œ±)))
    else
        zero(Number)
    end
end
function ccdf(dst::AbstractWeibull, œÜ::Number, t::Number=zero(œÜ))
    Œ∏, Œ±, œâ = params(dst)
    dimension(Œ∏)==dimension(œÜ)==dimension(t) || return false
    if œÜ >= zero(Œ∏)
        y = uconvert(unit(Œ∏),œÜ) / Œ∏
        eval(œâ,t) * exp(-y^Œ±)
    else
        eval(œâ,t)
    end
end

## log-normal
"""
    MultiStateSystems.LogNormal

The [*Log-normal distribution*](https://en.wikipedia.org/wiki/Log-normal_distribution)
with expected value `Œº` and standard deviation `œÉ` of the corresponding normal
distribution and optional weight `œâ` has a probability density function

```math
f(x, Œº, œÉ, œâ) = \\begin{cases}
                    \\frac{œâ}{\\sqrt{2œÄ} x œÉ} \\cdot \\cdot e^{-\\big(\\frac{(\\ln{x}-Œº)^{2}}{2 œÉ^{2}}\\big)}   &\\text{if:}~x ‚â• 0, \\\\
                    0                                                                                           &\\text{if:}~x < 0.
                \\end{cases}
```

Given the ln-function, all Unitful values are converted to correspond with the unit of `Œº`.

# Constructors
| Full               | Abbr.         | Description                                                  |
| :----------------- | :------------ | :----------------------------------------------------------- |
| `LogNormal(Œº,œÉ,œâ)` | `ùë≥(Œº,œÉ,œâ)`    | full constructor                                             |
| `LogNormal(Œº,œÉ)`   | `ùë≥(Œº,œÉ)`      | constructor which defaults to `LogNormal(Œº,œÉ,1.0)`           |
| `LogNormal(Œº)`     | `ùë≥(Œº)`        | constructor which defaults to `LogNormal(Œº,1.0,1.0)`         |
| `LogNormal()`      | `ùë≥()`         | empty constructor which defaults to `LogNormal(1.0,1.0,1.0)` |
# Examples
```julia-repl
julia> LogNormal()          # default Log-normal distr. with Œº = 1.0, œÉ = 1.0 and œâ = 1.0
julia> ùë≥(3.0u"minute")      # Log-normal distr. with Œº = 3.0 min, œÉ = 1.0 min and œâ = 1.0
julia> ùë≥(5.0u"yr",4.0u"d")  # Log-normal distr. with Œº = 5.0 yr, œÉ = 4.0 d and œâ = 1.0
julia> ùë≥(10.0,0.5,0.2)      # scaled Log-normal distr. with Œº = 10.0, œÉ = 0.5 and œâ = 0.2
```
"""
# abstract type
abstract type AbstractLogNormal{X,Y,Z} <: AbstractDistribution{X,Y,Z} end

# struct - Œº::Number, œÉ::Number, œâ::Real
struct LogNormalNNR{X<:Number, Y<:Real, Z<:Function} <: AbstractLogNormal{X,Y,Z}
    Œº::X            # mean of the corresponding normal distribution
    œÉ::X            # shape of the corresponding normal distribution
    œâ::Y            # weight: 0.0 < œâ <= 1.0
end
# constructors
LogNormal() = LogNormalNNR{Number,Real,Function}(1.0, 1.0, 1.0)
LogNormal(Œº::Number) = LogNormalNNR{Number,Real,Function}(Œº, 1.0unit(Œº), 1.0)
LogNormal(Œº::Number, œÉ::Number) = 
    LogNormalNNR{Number,Real,Function}(Œº, uconvert(unit(Œº),œÉ), 1.0)
LogNormal(Œº::Number, œÉ::Number, œâ::Real) = 
    LogNormalNNR{Number,Real,Function}(Œº, uconvert(unit(Œº),œÉ), œâ)

# struct - Œº::Number, œÉ::Number, œâ::Function
struct LogNormalNNF{X<:Number, Y<:Real, Z<:Function} <: AbstractLogNormal{X,Y,Z}
    Œº::X            # mean of the corresponding normal distribution
    œÉ::X            # shape of the corresponding normal distribution
    œâ::Z            # weight: 0.0 < œâ(t) <= 1.0
end
# constructors
LogNormal(Œº::Number, œÉ::Number, œâ::Function) = 
    LogNormalNNF{Number,Real,Function}(Œº, uconvert(unit(Œº),œÉ), œâ)

# shortened constructors
ùë≥() = LogNormal()
ùë≥(Œº::Number) = LogNormal(Œº)
ùë≥(Œº::Number, œÉ::Number) = LogNormal(Œº, œÉ)
ùë≥(Œº::Number, œÉ::Number, œâ::Real) = LogNormal(Œº, œÉ, œâ)
ùë≥(Œº::Number, œÉ::Number, œâ::Function) = LogNormal(Œº, œÉ, œâ)

# general functions
weight(dst::AbstractLogNormal) = dst.œâ
params(dst::AbstractLogNormal) = (dst.Œº, dst.œÉ, dst.œâ)

minimum(dst::AbstractLogNormal) = zero(dst.Œº)
maximum(dst::AbstractLogNormal) = (Inf)unit(dst.Œº)

# quantile functions
quantile(dst::AbstractLogNormal, p::Real)  = 
    exp(dst.Œº + sqrt(2) * dst.œÉ * _SF.erfinv(2.0 * p - 1.0))
cquantile(dst::AbstractLogNormal, p::Real) = 
    exp(dst.Œº + sqrt(2) * dst.œÉ * _SF.erfinv(2.0 * (1.0 - p) - 1.0))
sojourn(dst::AbstractLogNormal,dœÜ::Number,tol::Real) = 
    zero(dst.Œº):uconvert(dst.Œº,dœÜ):cquantile(dst,tol) 

# density functions
function pdf(dst::AbstractLogNormal, œÜ::Number, t::Number=zero(œÜ))
    Œº, œÉ, œâ = params(dst)
    dimension(Œº)==dimension(œÉ)==dimension(œÜ)==dimension(t) || return false
    if œÜ >= zero(Œº)
        x = ustrip(unit(Œº), œÉ)
        y = uconvert(unit(Œº), œÜ)
        z = uconvert(unit(Œº/Œº),(log(y) - Œº)^2 / (2 * œÉ^2))
        eval(œâ,t) / (sqrt(2 * pi) * x * y) * exp(-z)
    else
        zero(1/œÜ)
    end
end
function cdf(dst::AbstractLogNormal, œÜ::Number, t::Number=zero(œÜ))
    Œº, œÉ, œâ = params(dst)
    dimension(Œº)==dimension(œÉ)==dimension(œÜ)==dimension(t) || return false
    if œÜ >= zero(Œº)
        x = uconvert(unit(Œº), œÜ)
        y = uconvert(unit(Œº/Œº),(log(x) - Œº) / (sqrt(2) * œÉ))
        eval(œâ,t) / 2 * _SF.erfc(-y)
    else
        zero(Number)
    end
end
function ccdf(dst::AbstractLogNormal, œÜ::Number, t::Number=zero(œÜ))
    Œº, œÉ, œâ = params(dst)
    dimension(Œº)==dimension(œÉ)==dimension(œÜ)==dimension(t) || return false
    if œÜ >= zero(Œº)
        x = uconvert(unit(Œº), œÜ)
        y = uconvert(unit(Œº/Œº),(log(x) - Œº) / (sqrt(2) * œÉ))
        eval(œâ,t) * (1 - _SF.erfc(-y) / 2)
    else
        eval(œâ,t)
    end
end