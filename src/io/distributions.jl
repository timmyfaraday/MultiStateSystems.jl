################################################################################
#  Copyright 2020, Tom Van Acker                                               #
################################################################################
# MultiStateSystems.jl                                                         #
# A Julia package to solve multi-state system models.                          #
# See http://github.com/timmyfaraday/MultiStateSystems.jl                      #
################################################################################

## quantile
quantile_bisect(dst::AbstractDistribution, p::Real) =
    quantile_bisect(dst, p, minimum(dst), maximum(dst), 1.0e-12)
function quantile_bisect(dst::AbstractDistribution, p::Real, lx::Real, rx::Real,
                         tol::Real)
    cl, cr = cdf(dst, lx), cdf(dst, rx)
    @assert cl <= p <= cr
    while rx - lx > tol
        m = (lx + rx) / 2
        c = cdf(dst, m)
        if p > c
            cl, lx = c, m
        else
            cr, rx = c, m
    end end
    return (lx + rx) / 2
end

## exponential
"""
    Exponential

The [*exponential distribution*](http://en.wikipedia.org/wiki/Exponential_distribution)
with scale parameter `Œ∏` and an optional weight `œâ` has a probability density
function

```math
f(x; Œ∏, œâ) = \begin{cases}
                œâ/Œ∏ e^{-x/Œ∏}    & x ‚â• 0, \\
                0               & x < 0.
             \end{cases}
```
"""
# struct
struct Exponential{N<:Number, R<:Real} <: AbstractDistribution{N,R}
    Œ∏::N            # scale
    œâ::R            # weight: 0.0 < œâ <= 1.0
end

# constructors
Exponential() = Exponential(1.0, 1.0)
Exponential(Œ∏::Number) = Exponential(Œ∏, 1.0)

# shortened constructors
ùë¨() = Exponential()
ùë¨(Œ∏::Number) = Exponential(Œ∏)
ùë¨(Œ∏::Number, œâ::Real) = Exponential(Œ∏, œâ)

# functions
scale(dst::Exponential)  = dst.Œ∏
weight(dst::Exponential) = dst.œâ
params(dst::Exponential) = (dst.Œ∏, dst.œâ)

rate(dst::Exponential) = 1.0 / dst.Œ∏

minimum(dst::Exponential) = zero(dst.Œ∏)
maximum(dst::Exponential) = (Inf)unit(dst.Œ∏)

xv(dst::Exponential, z::Real) = z * dst.Œ∏
quantile(dst::Exponential, p::Real)  = -xv(dst, log1p(-p))
cquantile(dst::Exponential, p::Real) = -xv(dst, log(p))
sojourn(dst::Exponential,dœÜ::Number,tol::Real) = 
    0.0unit(dœÜ):dœÜ:cquantile(dst,tol)

function pdf(dst::Exponential, x::Number)
    Œ∏, œâ = params(dst)
    dimension(Œ∏)==dimension(x) || return false
    if x >= (0)unit(Œ∏)
        y = uconvert(unit(Œ∏),x)
        œâ * (1/Œ∏) * exp(-y/Œ∏)
    else
        zero(R)unit(Œ∏)
    end
end
function cdf(dst::Exponential, x::Number)
    Œ∏, œâ = params(dst)
    dimension(Œ∏)==dimension(x) || return false
    if x >= (0)unit(Œ∏)
        y = uconvert(unit(Œ∏),x)
        œâ * (1 - exp(-y/Œ∏))
    else
        zero(R)
    end
end
function ccdf(dst::Exponential, x::Number)
    Œ∏, œâ = params(dst)
    dimension(Œ∏)==dimension(x) || return false
    if x >= (0)unit(Œ∏)
        y = uconvert(unit(Œ∏),x)
        œâ * exp(-y/Œ∏)
    else
        œâ
    end
end

## weibull
"""
    Weibull

The [*Weibull distribution*](http://en.wikipedia.org/wiki/Weibull_distribution)
with scale parameter `Œ∏`, shape parameter `Œ±` and optional weight `œâ` has a
probability density function

```math
f(x, Œ∏, Œ±, œâ) = \\begin{cases}
                    \\frac{Œ±œâ}{Œ∏} \\cdot \\big(\\frac{x}{Œ∏}\\big)^{Œ±-1} \\cdot e^{-\\big(\\frac{x}{Œ∏}\\big)^{Œ±}}  &\\text{if:}~x ‚â• 0, \\\\
                    0                                                                                 &\\text{if:}~x < 0.
                \\end{cases}
```
# Constructors
| Full              | Abbr.         | Description                                               |
| :---------------- | :------------ | :-------------------------------------------------------- |
| `Weibull(Œ∏,Œ±,œâ)`  | `ùëæ(Œ∏,Œ±,œâ)`   | full constructor                                           |
| `Weibull(Œ∏,Œ±)`    | `ùëæ(Œ∏,Œ±)`     | constructor which defaults to `Weibull(Œ∏,Œ±,1.0)`           |
| `Weibull(Œ∏)`      | `ùëæ(Œ∏)`       | constructor which defaults to `Weibull(Œ∏,1.0,1.0)`         |
| `Weibull()`       | `ùëæ()`        | empty constructor which defaults to `Weibull(1.0,1.0,1.0)` |
# Examples
```julia-repl
julia> Weibull()            # default Weibull distr. with Œ∏ = 1.0, Œ± = 1.0 and œâ = 1.0
julia> ùëæ(3.0u"minute")     # Weibull distr. with Œ∏ = 3.0 min, Œ± = 1.0 and œâ = 1.0
julia> ùëæ(5.0u"yr",4.0)     # Weibull distr. with Œ∏ = 5.0 yr, Œ± = 4.0 and œâ = 1.0
julia> ùëæ(10.0,0.5,0.2)     # scaled Weibull distr. with Œ∏ = 10.0, Œ± = 0.5 and œâ = 0.2
```
"""
# struct
struct Weibull{N<:Number, R<:Real} <: AbstractDistribution{N,R}
    Œ∏::N            # scale
    Œ±::R            # shape
    œâ::R            # weight: 0.0 < œâ <= 1.0
end

# constructors
Weibull() = Weibull(1.0, 1.0, 1.0)
Weibull(Œ∏::Number) = Weibull(Œ∏, 1.0, 1.0)
Weibull(Œ∏::Number, Œ±::Real) = Weibull(Œ∏, Œ±, 1.0)

# shortened constructors
ùëæ() = Weibull()
ùëæ(Œ∏::Number) = Weibull(Œ∏)
ùëæ(Œ∏::Number, Œ±::Real) = Weibull(Œ∏, Œ±)
ùëæ(Œ∏::Number, Œ±::Real, œâ::Real) = Weibull(Œ∏, Œ±, œâ)

# functions
scale(dst::Weibull)  = dst.Œ∏
shape(dst::Weibull)  = dst.Œ±
weight(dst::Weibull) = dst.œâ
params(dst::Weibull) = (dst.Œ∏, dst.Œ±, dst.œâ)

minimum(dst::Weibull) = zero(dst.Œ∏)
maximum(dst::Weibull) = (Inf)unit(dst.Œ∏)

xv(dst::Weibull, z::Real) = dst.Œ∏ * z ^ (1 / dst.Œ±)
quantile(dst::Weibull, p::Real)  = xv(dst, -log1p(-p))
cquantile(dst::Weibull, p::Real) = xv(dst, -log(p))
sojourn(dst::Weibull,dœÜ::Number,tol::Real) = 0.0unit(dœÜ):dœÜ:cquantile(dst,tol) 

function pdf(dst::Weibull, x::Number)
    Œ∏, Œ±, œâ = params(dst)
    dimension(Œ∏)==dimension(x) || return false
    if x >= (0)unit(Œ∏)
        y = (uconvert(unit(Œ∏),x) + 1e-10unit(Œ∏)) / Œ∏
        œâ * (Œ± / Œ∏) * y^(Œ± - 1) * exp(-y^Œ±)
    else
        zero(R)unit(Œ∏)
    end
end
function cdf(dst::Weibull, x::Number)
    Œ∏, Œ±, œâ = params(dst)
    dimension(Œ∏)==dimension(x) || return false
    if x >= (0)unit(Œ∏)
        y = uconvert(unit(Œ∏),x) / Œ∏
        ustrip(œâ * (1 - exp(-y^Œ±)))
    else
        zero(R)
    end
end
function ccdf(dst::Weibull, x::Number)
    Œ∏, Œ±, œâ = params(dst)
    dimension(Œ∏)==dimension(x) || return false
    if x >= (0)unit(Œ∏)
        y = uconvert(unit(Œ∏),x) / Œ∏
        œâ * exp(-y^Œ±)
    else
        œâ
    end
end

## raised cosine
# struct
"""
    Cosine

The [**raised cosine distribution**](https://en.wikipedia.org/wiki/Raised_cosine_distribution)
with mean `Œº` [`Number`], maximal deviation `s` [`Number`] and optional weight
`œâ` [`Real`] has a probability density function
```math
f(x, Œº, œÉ, œâ) = \\begin{cases}
                    0                                                                  &\\text{if:}~x < Œº-s,        \\\\
                    \\frac{œâ}{2s} \\big(1 + œÄ \\cos\\big(\\frac{x - Œº}{s}\\big)\big)   &\\text{if:}~Œº-s ‚â§ x ‚â§ Œº+s,  \\\\
                    0                                                                  &\\text{if:}~x > Œº+s.
                \\end{cases}
```
# Constructors
| Full              | Abbr.         | Description                                               |
| :---------------- | :------------ | :-------------------------------------------------------- |
| `Cosine(Œº,s,œâ)`   | `ùë™(Œº,s,œâ)`    | full constructor                                           |
| `Cosine(Œº,s)`     | `ùë™(Œº,s)`      | constructor which defaults to `Cosine(Œº,s,1.0)`         |
| `Cosine(Œº)`       | `ùë™(Œº)`        | constructor which defaults to `Cosine(Œº,1.0,1.0)`         |
| `Cosine()`        | `ùë™()`         | empty constructor which defaults to `Cosine(1.0,1.0,1.0)` |
# Examples
```julia-repl
julia> Cosine()             # default Raised Cosine distr. with Œº = 1.0, s = 1.0 and œâ = 1.0
julia> ùë™(3.0u"minute")      # Raised Cosine distr. with Œº = 3.0 min, s = 1.0 min and œâ = 1.0
julia> ùë™(5.0u"yr",4.0u"d")  # Raised Cosine distr. with Œº = 5.0 yr, s = 4.0 d and œâ = 1.0
julia> ùë™(10.0,0.5,0.2)      # scaled Raised Cosine distr. with Œº = 10.0, œÉ = 0.5 and œâ = 0.2
```
"""
struct Cosine{N<:Number, R<:Real} <: AbstractDistribution{N,R}
    Œº::N            # mean
    s::N            # maximal deviation
    œâ::R            # weight
end

# constructors
Cosine() = Cosine(1.0, 1.0, 1.0)
Cosine(Œº::Number) = Cosine(Œº, oneunit(Œº), 1.0)
Cosine(Œº::Number, s::Number) = Cosine(Œº, uconvert(unit(Œº), s), 1.0)

# shortened constructors
ùë™() = Cosine()
ùë™(Œº::Number) = Cosine(Œº)
ùë™(Œº::Number, s::Number) = Cosine(Œº, uconvert(unit(Œº),s))
ùë™(Œº::Number, s::Number, œâ::Real) = Cosine(Œº, uconvert(unit(Œº), s), œâ)

# functions
mean(dst::Cosine)   = dst.Œº
dev(dst::Cosine)    = dst.s
weight(dst::Cosine) = dst.œâ
params(dst::Cosine) = (dst.Œº, dst.s, dst.œâ)

minimum(dst::Cosine) = dst.Œº-dst.s
maximum(dst::Cosine) = dst.Œº+dst.s

quantile(dst::Cosine, p::Real) = quantile_bisect(dst, p)
cquantile(dst::Cosine, p::Real) = quantile(dst, 1-p)
sojourn(dst::Cosine, dœÜ::Number, tol::Real) = 
    dst.Œº-dst.s:dœÜ:dst.Œº+dst.s+dœÜ

function pdf(dst::Cosine, x::Number)
    Œº, s, œâ = params(dst)
    dimension(Œº)==dimension(œÉ)==dimension(x) || return false
    if Œº-s <= x <= Œº+s
        y = (uconvert(unit(Œº),x) - Œº) / (2 * s)
        œâ / (2 * s) * (1 + cospi(y))
    else
        zero(Real)/oneunit(Œº)
    end
end
function cdf(dst::Cosine, x::Number)
    Œº, s, œâ = params(dst)
    dimension(Œº)==dimension(œÉ)==dimension(x) || return false
    if Œº-s > x
        zero(Real)
    elseif Œº-s <= x <= Œº+s
        y = (uconvert(unit(Œº),x) - Œº) / s
        œâ / 2 * (1 + y + sinpi(y) / œÄ)
    elseif x > Œº+s
        œâ
    end
end
function ccdf(dst::Cosine, x::Number)
    Œº, s, œâ = params(dst)
    dimension(Œº)==dimension(œÉ)==dimension(x) || return false
    if Œº-s > x
        œâ
    elseif Œº-s <= x <= Œº+s
        y = (Œº - uconvert(unit(Œº), x)) / s
        œâ / 2 * (1 + y + sinpi(y) / œÄ)
    elseif x > Œº+s
        zero(Real)
    end
end

## dirac
"""
    Dirac

The [*Dirac distribution*](https://en.wikipedia.org/wiki/Dirac_delta_function)
with offset `o` and optional weight `œâ` has a probability density function

```math
f(x; o, œâ) = \begin{cases}
                œâ   & x = 0, \\
                0   & x ‚â† 0.
             \end{cases}
```
"""
# struct
struct Dirac{N<:Number, R<:Real} <: AbstractDistribution{N,R}
    o::N            # offset
    œâ::R            # weight: 0.0 < œâ <= 1.0
end

# constructors
Dirac() = Dirac(0.0, 1.0)
Dirac(o::Number) = Dirac(o, 1.0)

# shortened constructors
ùë´() = Dirac()
ùë´(o::Number) = Dirac(o)
ùë´(o::Number, œâ::Real) = Dirac(o, œâ)

# functions
offset(dst::Dirac) = dst.o
weight(dst::Dirac) = dst.œâ
params(dst::Dirac) = (dst.o, dst.œâ)

minimum(dst::Dirac) = dst.o
maximum(dst::Dirac) = dst.o

quantile(dst::Dirac, p::Real)  = dst.o
cquantile(dst::Dirac, p::Real) = dst.o

function pdf(dst::Dirac, x::Number)
    o, œâ = params(dst)
    dimension(o)==dimension(x) || return false
    if x == o
        œâ
    else
        zero(R)
    end
end
function cdf(dst::Dirac, x::Number)
    o, œâ = params(dst)
    dimension(o)==dimension(x) || return false
    if x > o
        œâ
    else
        zero(R)
    end
end
function ccdf(dst::Dirac, x::Number)
    o, œâ = params(dst)
    dimension(o)==dimension(x) || return false
    if x > o
        zero(R)
    else
        œâ
    end
end

## uniform
"""
    Uniform

The [*continuous uniform distribution*](http://en.wikipedia.org/wiki/Uniform_distribution_(continuous))
over an interval `[a, b]` and with optional weight `œâ` has a probability density
function

```math
f(x; a, b, œâ) = \begin{cases}
                    œâ/(b - a)   & a ‚â§ x ‚â§ b, \\
                    0           & a > x || x > b.
                \end{cases}
```
"""
# struct
struct Uniform{N<:Number, R<:Real} <: AbstractDistribution{N,R}
    a::N            # start
    b::N            # end
    œâ::R            # weight: 0.0 < œâ <= 1.0
end

# constructors
Uniform() = Uniform(0.0, 1.0, 1.0)
Uniform(a::Number, b::Number) = Uniform(a, b, 1.0)

# shortened constructors
ùëº() = Uniform()
ùëº(a::Number, b::Number) = Uniform(a, b)
ùëº(a::Number, b::Number, œâ::Real) = Uniform(a, b, œâ)

# functions
fr(dst::Uniform)     = dst.a
to(dst::Uniform)     = dst.b
weight(dst::Uniform) = dst.œâ
params(dst::Uniform) = (dst.a, dst.b, dst.œâ)

minimum(dst::Uniform) = dst.a
maximum(dst::Uniform) = dst.b

quantile(dst::Uniform, p::Real)  = dst.a + p * (dst.b - dst.a)
cquantile(dst::Uniform, p::Real) = dst.b + p * (dst.a - dst.b)
sojourn(dst::Uniform,dœÜ::Number,tol::Real) = 0.0unit(dœÜ):dœÜ:cquantile(dst,tol) 

function pdf(dst::Uniform, x::Number)
    a, b, œâ = params(dst)
    dimension(a)==dimension(b)==dimension(x) || return false
    if a <= x <= b
        œâ / (b - a)
    else
        zero(R)unit(a)
    end
end
function cdf(dst::Uniform, x::Number)
    a, b, œâ = params(dst)
    dimension(a)==dimension(b)==dimension(x) || return false
    if a > x
        zero(R)
    elseif a <= x <= b
        y = uconvert(unit(a),x)
        œâ + œâ * (y - b) / (b - a)
    else
        œâ
    end
end
function ccdf(dst::Uniform, x::Number)
    a, b, œâ = params(dst)
    dimension(a)==dimension(b)==dimension(x) || return false
    if a > x
        œâ
    elseif a <= x <= b
        y = uconvert(unit(Œº),x)
        œâ * (b - y) / (b - a)
    else
        zero(R)
    end
end