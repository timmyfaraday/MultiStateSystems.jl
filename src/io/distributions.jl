################################################################################
#  Copyright 2020, Tom Van Acker                                               #
################################################################################
# MultiStateSystems.jl                                                         #
# A Julia package to solve multi-state system models.                          #
# See http://github.com/timmyfaraday/MultiStateSystems.jl                      #
################################################################################

## Exponential
# struct
"""
    Exponential

The [**exponential distribution**](http://en.wikipedia.org/wiki/Exponential_distribution)
with scale parameter `Œ∏` [`Number`] and an optional weight `œâ` [`Real`] has a
probability density function
```math
f(x, Œ∏, œâ) = \\begin{cases}
                \\frac{œâ}{Œ∏} \\cdot e^{-\\frac{x}{Œ∏}}   &\\text{if:}~x ‚â• 0, \\\\
                0                                       &\\text{if:}~x < 0.
             \\end{cases}
```
# Constructors
| Full              | Abbr.         | Description                                               |
| :---------------- | :------------ | :-------------------------------------------------------- |
| `Exponential(Œ∏,œâ)`| `ùë¨(Œ∏,œâ)`     | full constructor                                           |
| `Exponential(Œ∏)`  | `ùë¨(Œ∏)`       | constructor which defaults to `Exponential(Œ∏,1.0)`         |
| `Exponential()`   | `ùë¨()`        | empty constructor which defaults to `Exponential(1.0,1.0)` |
# Examples
```julia-repl
julia> Exponential()        # default exp. distr. with Œ∏ = 1.0 and œâ = 1.0
julia> ùë¨(3.0u"yr")          # exp. distr. with Œ∏ = 3.0 yr and œâ = 1.0
julia> ùë¨(1.0u"hr",0.2)      # scaled exp. distr. with Œ∏ = 1.0 hr and œâ = 0.2
```
"""
struct Exponential{N<:Number, R<:Real} <: AbstractDistribution{N,R}
    Œ∏::N            # scale
    œâ::R            # weight: 0.0 < œâ <= 1.0
end

# constructors
Exponential() = Exponential(1.0, 1.0)
Exponential(Œ∏::Number) = Exponential(Œ∏, 1.0)

# shortened constructors
ùë¨() = Exponential()
ùë¨(Œ∏::Number) = Exponential(Œ∏)
ùë¨(Œ∏::Number, œâ::Real) = Exponential(Œ∏, œâ)

# functions
scale(dst::Exponential)  = dst.Œ∏
weight(dst::Exponential) = dst.œâ
params(dst::Exponential) = (dst.Œ∏, dst.œâ)
function pdf(dst::Exponential, x::Number)
    Œ∏, œâ = params(dst)
    dimension(Œ∏)==dimension(x) || return false
    if x >= (0)unit(Œ∏)
        y = uconvert(unit(Œ∏),x)
        œâ * (1/Œ∏) * exp(-y/Œ∏)
    else
        zero(R)unit(Œ∏)
    end
end
function cdf(dst::Exponential, x::Number)
    Œ∏, œâ = params(dst)
    dimension(Œ∏)==dimension(x) || return false
    if x >= (0)unit(Œ∏)
        y = uconvert(unit(Œ∏),x)
        œâ * (1 - exp(-y/Œ∏))
    else
        zero(R)
    end
end
function ccdf(dst::Exponential, x::Number)
    Œ∏, œâ = params(dst)
    dimension(Œ∏)==dimension(x) || return false
    if x >= (0)unit(Œ∏)
        y = uconvert(unit(Œ∏),x)
        œâ * exp(-y/Œ∏)
    else
        œâ
    end
end

## Weibull
# struct
"""
    Weibull

The [**Weibull distribution**](http://en.wikipedia.org/wiki/Weibull_distribution)
with scale parameter `Œ∏` [`Number`], shape parameter `Œ±` [`Real`] and optional
weight `œâ` [`Real`] has a probability density function
```math
f(x, Œ∏, Œ±, œâ) = \\begin{cases}
                    \\frac{Œ±œâ}{Œ∏} \\cdot \\big(\\frac{x}{Œ∏}\\big)^{Œ±-1} \\cdot e^{-\\big(\\frac{x}{Œ∏}\\big)^{Œ±}}  &\\text{if:}~x ‚â• 0, \\\\
                    0                                                                                 &\\text{if:}~x < 0.
                \\end{cases}
```
# Constructors
| Full              | Abbr.         | Description                                               |
| :---------------- | :------------ | :-------------------------------------------------------- |
| `Weibull(Œ∏,Œ±,œâ)`  | `ùëæ(Œ∏,Œ±,œâ)`   | full constructor                                           |
| `Weibull(Œ∏,Œ±)`    | `ùëæ(Œ∏,Œ±)`     | constructor which defaults to `Weibull(Œ∏,Œ±,1.0)`         |
| `Weibull(Œ∏)`      | `ùëæ(Œ∏)`       | constructor which defaults to `Weibull(Œ∏,1.0,1.0)`         |
| `Weibull()`       | `ùëæ()`        | empty constructor which defaults to `Weibull(1.0,1.0,1.0)` |
# Examples
```julia-repl
julia> Weibull()            # default Weibull distr. with Œ∏ = 1.0, Œ± = 1.0 and œâ = 1.0
julia> ùëæ(3.0u"minute")     # Weibull distr. with Œ∏ = 3.0 min, Œ± = 1.0 and œâ = 1.0
julia> ùëæ(5.0u"yr",4.0)     # Weibull distr. with Œ∏ = 5.0 yr, Œ± = 4.0 and œâ = 1.0
julia> ùëæ(10.0,0.5,0.2)     # scaled Weibull distr. with Œ∏ = 10.0, Œ± = 0.5 and œâ = 0.2
```
"""
struct Weibull{N<:Number, R<:Real} <: AbstractDistribution{N,R}
    Œ∏::N            # scale
    Œ±::R            # shape
    œâ::R            # weight: 0.0 < œâ <= 1.0
end

# constructors
Weibull() = Weibull(1.0, 1.0, 1.0)
Weibull(Œ∏::Number) = Weibull(Œ∏, 1.0, 1.0)
Weibull(Œ∏::Number, Œ±::Real) = Weibull(Œ∏, Œ±, 1.0)

# shortened constructors
ùëæ() = Weibull()
ùëæ(Œ∏::Number) = Weibull(Œ∏)
ùëæ(Œ∏::Number, Œ±::Real) = Weibull(Œ∏, Œ±)
ùëæ(Œ∏::Number, Œ±::Real, œâ::Real) = Weibull(Œ∏, Œ±, œâ)

# functions
scale(dst::Weibull)  = dst.Œ∏
shape(dst::Weibull)  = dst.Œ±
weight(dst::Weibull) = dst.œâ
params(dst::Weibull) = (dst.Œ∏, dst.Œ±, dst.œâ)
function pdf(dst::Weibull, x::Number)
    Œ∏, Œ±, œâ = params(dst)
    dimension(Œ∏)==dimension(x) || return false
    if x >= (0)unit(Œ∏)
        y = uconvert(unit(Œ∏),x) / Œ∏
        œâ * (Œ± / Œ∏) * y^(Œ± - 1) * exp(-y^Œ±)
    else
        zero(R)unit(Œ∏)
    end
end
function cdf(dst::Weibull, x::Number)
    Œ∏, Œ±, œâ = params(dst)
    dimension(Œ∏)==dimension(x) || return false
    if x >= (0)unit(Œ∏)
        y = uconvert(unit(Œ∏),x) / Œ∏
        ustrip(œâ * (1 - exp(-y^Œ±)))
    else
        zero(R)
    end
end
function ccdf(dst::Weibull, x::Number)
    Œ∏, Œ±, œâ = params(dst)
    dimension(Œ∏)==dimension(x) || return false
    if x >= (0)unit(Œ∏)
        y = uconvert(unit(Œ∏),x) / Œ∏
        œâ * exp(-y^Œ±)
    else
        œâ
    end
end

## LogNormal
# struct
"""
    LogNormal

The [**log normal distribution**](http://en.wikipedia.org/wiki/Log-normal_distribution)
with mean `Œº` [`Number`], standard deviation `œÉ` [`Number`] and optional weight
`œâ` [`Real`] has a probability density function
```math
f(x, Œº, œÉ, œâ) = \\begin{cases}
                    \\frac{œâ}{\\sqrt{2œÄ}œÉx} e^{-\\frac{(\\log(x)-\\log(Œº))^{2}}{2œÉ¬≤}}  &\\text{if:}~x ‚â• 0, \\\\
                    0                                                                  &\\text{if:}~x < 0.
                \\end{cases}
```
# Constructors
| Full              | Abbr.         | Description                                               |
| :---------------- | :------------ | :-------------------------------------------------------- |
| `LogNormal(Œº,œÉ,œâ)`| `ùë≥ùëµ(Œº,œÉ,œâ)`  | full constructor                                           |
| `LogNormal(Œº,œÉ)`  | `ùë≥ùëµ(Œº,œÉ)`    | constructor which defaults to `LogNormal(Œº,œÉ,1.0)`         |
| `LogNormal(Œº)`    | `ùë≥ùëµ(Œº)`      | constructor which defaults to `LogNormal(Œº,1.0,1.0)`         |
| `LogNormal()`     | `ùë≥ùëµ()`       | empty constructor which defaults to `LogNormal(1.0,1.0,1.0)` |
# Examples
```julia-repl
julia> LogNormal()           # default LogNormal distr. with Œº = 1.0, œÉ = 1.0 and œâ = 1.0
julia> ùë≥ùëµ(3.0u"minute")     # LogNormal distr. with Œº = 3.0 min, œÉ = 1.0 and œâ = 1.0
julia> ùë≥ùëµ(5.0u"yr",4.0)     # LogNormal distr. with Œº = 5.0 yr, œÉ = 4.0 and œâ = 1.0
julia> ùë≥ùëµ(10.0,0.5,0.2)     # scaled LogNormal distr. with Œº = 10.0, œÉ = 0.5 and œâ = 0.2
```
"""
struct LogNormal{N<:Number, R<:Real} <: AbstractDistribution{N,R}
    Œº::N            # mean
    œÉ::N            # std
    œâ::R            # weight: 0.0 < œâ <= 1.0
end

# constructors
LogNormal() = LogNormal(1.0, 1.0, 1.0)
LogNormal(Œº::Number) = LogNormal(Œº, (1.0)unit(Œº), 1.0)
LogNormal(Œº::Number, œÉ::Number) = LogNormal(Œº, uconvert(unit(Œº),œÉ), 1.0)

# shortened constructors
ùë≥ùëµ() = LogNormal()
ùë≥ùëµ(Œº::Number) = LogNormal(Œº)
ùë≥ùëµ(Œº::Number, œÉ::Number) = LogNormal(Œº, uconvert(unit(Œº),œÉ))
ùë≥ùëµ(Œº::Number, œÉ::Number, œâ::Real) = LogNormal(Œº, uconvert(unit(Œº),œÉ), œâ)

# functions
mean(dst::LogNormal)  = dst.Œº
stdev(dst::LogNormal)  = dst.œÉ
weight(dst::LogNormal) = dst.œâ
params(dst::LogNormal) = (dst.Œº, dst.œÉ, dst.œâ)
function pdf(dst::LogNormal, x::Number)
    Œº, œÉ, œâ = params(dst)
    dimension(Œº)==dimension(œÉ)==dimension(x) || return false
    if x >= (0)unit(Œº)
        y = uconvert(unit(Œº),x)
        œâ / (sqrt(2œÄ) * œÉ * y) * exp(-(log(y) - log(Œº))^2/(2 * œÉ^2))
    else
        zero(R)unit(Œº)
    end
end
function cdf(dst::LogNormal, x::Number)
    Œº, œÉ, œâ = params(dst)
    dimension(Œº)==dimension(œÉ)==dimension(x) || return false
    if x >= (0)unit(Œº)
        y = uconvert(unit(Œº),x)
        œâ/2 + œâ/2 * erf((log(y) - log(Œº))/(sqrt(2) * œÉ))
    else
        zero(R)
    end
end
function ccdf(dst::LogNormal, x::Number)
    Œº, œÉ, œâ = params(dst)
    dimension(Œº)==dimension(œÉ)==dimension(x) || return false
    if x >= (0)unit(Œº)
        y = uconvert(unit(Œº),x)
        œâ/2 - œâ/2 * erf((log(y) - log(Œº))/(sqrt(2) * œÉ))
    else
        œâ
    end
end

## Dirac
# struct
"""
    Dirac

The [**Dirac distribution**](https://en.wikipedia.org/wiki/Dirac_delta_function)
with offset `o` [`Number`] and optional weight `œâ` [`Real`] has a probability
density function

```math
f(x, o, œâ) = \\begin{cases}
                œâ   &\\text{if:}~x = 0, \\\\
                0   &\\text{if:}~x ‚â† 0.
              \\end{cases}
```
# Constructors
| Full          | Abbr.         | Description                                           |
| :------------ | :------------ | :---------------------------------------------------- |
| `Dirac(o,œâ)`  | `ùë´(o,œâ)`     | full constructor                                      |
| `Dirac(o)`    |`ùë´(o)`        | constructor which defaults to `Dirac(o,1.0)`          |
| `Dirac()`     |`ùë´()`         | empty constructor which defaults to `Dirac(0.0,1.0)`  |
# Examples
```julia-repl
julia> Dirac()              # default dirac distr. with o = 0.0 and œâ = 1.0
julia> ùë´(20.0u"hr")         # dirac distr. with o = 20.0 hr and œâ = 1.0
julia> Dirac(1.0,0.5)       # scaled dirac distr. with o = 1.0 and œâ = 0.5
```
"""
struct Dirac{N<:Number, R<:Real} <: AbstractDistribution{N,R}
    o::N            # offset
    œâ::R            # weight: 0.0 < œâ <= 1.0
end

# constructors
Dirac() = Dirac(0.0, 1.0)
Dirac(o::Number) = Dirac(o, 1.0)

# shortened constructors
ùë´() = Dirac()
ùë´(o::Number) = Dirac(o)
ùë´(o::Number, œâ::Real) = Dirac(o, œâ)

# functions
offset(dst::Dirac) = dst.o
weight(dst::Dirac) = dst.œâ
params(dst::Dirac) = (dst.o, dst.œâ)
function pdf(dst::Dirac, x::Number)
    o, œâ = params(dst)
    dimension(o)==dimension(x) || return false
    if x == o
        œâ
    else
        zero(R)
    end
end
function cdf(dst::Dirac, x::Number)
    o, œâ = params(dst)
    dimension(o)==dimension(x) || return false
    if x > o
        œâ
    else
        zero(R)
    end
end
function ccdf(dst::Dirac, x::Number)
    o, œâ = params(dst)
    dimension(o)==dimension(x) || return false
    if x > o
        zero(R)
    else
        œâ
    end
end

## Uniform
# struct
"""
    Uniform
The [**continuous uniform distribution**](http://en.wikipedia.org/wiki/Uniform_distribution_(continuous))
over an interval `[a, b]` [`Number`] and with optional weight `œâ` [`Real`] has a
probability density function
```math
f(x, a, b, œâ) = \\begin{cases}
                    \\frac{œâ}{b - a}   & \\text{if:}~a ‚â§ x ‚â§ b,        \\\\
                    0                  & \\text{if:}~a > x~||~b < x.
                \\end{cases}
```
# Constructors
| Full              | Abbr.         | Description                                                   |
| :------------     | :------------ | :------------------------------------------------------------ |
| `Uniform(a,b,œâ)`  | `ùëº(a,b,œâ)`    | full constructor                                             |
| `Uniform(a,b)`    | `ùëº(a,b)`      | constructor which defaults to `Uniform(a,b,1.0)`             |
| `Uniform()`       | `ùëº()`         | empty constructor which defaults to `Uniform(0.0,1.0,1.0)`   |
# Examples
```julia-repl
julia> ùëº()                     # default uniform distr. with a = 0.0, b = 1.0 and œâ = 1.0
julia> ùëº(1.0u"yr",2.0u"yr")    # uniform distr. with a = 1.0 yr, b = 1.0 yr and œâ = 1.0
julia> Uniform(1.0,3.0,0.4)    # scaled uniform distr. with a = 1.0, b = 3.0 and œâ = 0.4
```
"""
struct Uniform{N<:Number, R<:Real} <: AbstractDistribution{N,R}
    a::N            # start
    b::N            # end
    œâ::R            # weight: 0.0 < œâ <= 1.0
end

# constructors
Uniform() = Uniform(0.0, 1.0, 1.0)
Uniform(a::Number, b::Number) = Uniform(a, b, 1.0)

# shortened constructors
ùëº() = Uniform()
ùëº(a::Number, b::Number) = Uniform(a, b)
ùëº(a::Number, b::Number, œâ::Real) = Uniform(a, b, œâ)

# functions
fr(dst::Uniform)     = dst.a
to(dst::Uniform)     = dst.b
weight(dst::Uniform) = dst.œâ
params(dst::Uniform) = (dst.a, dst.b, dst.œâ)
function pdf(dst::Uniform, x::Number)
    a, b, œâ = params(dst)
    dimension(a)==dimension(b)==dimension(x) || return false
    if a <= x <= b
        œâ / (b - a)
    else
        zero(R)unit(a)
    end
end
function cdf(dst::Uniform, x::Number)
    a, b, œâ = params(dst)
    dimension(a)==dimension(b)==dimension(x) || return false
    if a > x
        zero(R)
    elseif a <= x <= b
        y = uconvert(unit(a),x)
        œâ + œâ * (y - b) / (b - a)
    else
        œâ
    end
end
function ccdf(dst::Uniform, x::Number)
    a, b, œâ = params(dst)
    dimension(a)==dimension(b)==dimension(x) || return false
    if a > x
        œâ
    elseif a <= x <= b
        y = uconvert(unit(Œº),x)
        œâ * (b - y) / (b - a)
    else
        zero(R)
    end
end
